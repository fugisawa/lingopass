import streamlit as st
import plotly.graph_objects as go
import plotly.express as px
from plotly.subplots import make_subplots
import pandas as pd
from pathlib import Path
import ast
import numpy as np
import seaborn as sns
import matplotlib.pyplot as plt
from datetime import datetime, timedelta
import warnings
warnings.filterwarnings('ignore')

# ========================================================================================
# CONFIGURA√á√ÉO DA P√ÅGINA E ESTILO
# ========================================================================================

st.set_page_config(
    page_title="LingoApp: Estrat√©gia de Expans√£o Multil√≠ngue",
    page_icon="üåç",
    layout="wide",
    initial_sidebar_state="expanded"
)

# CSS customizado seguindo .cursorrules (cores para dalt√¥nicos)
st.markdown("""
<style>
    .main-header {
        background: linear-gradient(90deg, #4A90E2 0%, #FF6B6B 100%);
        padding: 1rem 2rem;
        border-radius: 10px;
        color: white;
        margin-bottom: 2rem;
        text-align: center;
    }
    .metric-card {
        background: white;
        padding: 1rem;
        border-radius: 8px;
        box-shadow: 0 2px 4px rgba(0,0,0,0.1);
        border-left: 4px solid #4A90E2;
    }
    .insight-box {
        background: linear-gradient(135deg, #f8f9fa 0%, #e9ecef 100%);
        padding: 1rem;
        border-radius: 8px;
        border-left: 4px solid #FFB000;
        margin: 1rem 0;
    }
    .stSelectbox > div > div > div {
        background-color: #f8f9fa;
    }
    .stMultiSelect > div > div > div {
        background-color: #f8f9fa;
    }
    
    /* ESTILOS PARA ABAS MAIS EVIDENTES */
    .stTabs [data-baseweb="tab-list"] {
        gap: 8px;
        background-color: #f8f9fa;
        padding: 8px;
        border-radius: 10px;
        box-shadow: 0 2px 8px rgba(0,0,0,0.1);
    }
    
    .stTabs [data-baseweb="tab"] {
        height: 60px;
        padding: 12px 24px;
        background-color: white;
        border-radius: 8px;
        border: 2px solid #e9ecef;
        font-weight: 600;
        font-size: 16px;
        transition: all 0.3s ease;
    }
    
    .stTabs [aria-selected="true"] {
        background: linear-gradient(135deg, #4A90E2 0%, #FF6B6B 100%);
        color: white !important;
        border: 2px solid #4A90E2;
        box-shadow: 0 4px 12px rgba(74,144,226,0.3);
        transform: translateY(-2px);
    }
    
    .stTabs [data-baseweb="tab"]:hover {
        background-color: #f0f8ff;
        border-color: #4A90E2;
        transform: translateY(-1px);
        box-shadow: 0 2px 8px rgba(74,144,226,0.2);
    }
    
    .tab-header {
        background: linear-gradient(135deg, #4A90E2 0%, #FF6B6B 100%);
        color: white;
        padding: 1rem;
        border-radius: 10px;
        text-align: center;
        margin-bottom: 1.5rem;
        font-size: 1.2em;
        font-weight: bold;
    }
</style>
""", unsafe_allow_html=True)

# Paleta de cores seguindo .cursorrules (colorblind-safe)
COLORS = {
    'primary': '#4A90E2',      # Azul principal
    'highlight': '#FF6B6B',    # Vermelho coral para destaque
    'benchmark': '#FFB000',    # Amarelo dourado para benchmarks
    'neutral': '#6C757D',      # Cinza neutro
    'success': '#28A745',      # Verde para sucesso (usado com parcim√¥nia)
    'background': '#F8F9FA'    # Fundo claro
}

# ========================================================================================
# DADOS ESTRUTURADOS (Baseados no relat√≥rio original)
# ========================================================================================

@st.cache_data
def load_data():
    """Carrega e estrutura todos os dados do relat√≥rio LingoApp"""

    data_dir = Path(__file__).parent / "data"

    # Dados principais dos idiomas (corrigidos para demanda de aprendizado)
    df_languages = pd.read_csv(data_dir / "languages.csv")
    df_languages.rename(columns={
        'TAM_Milhoes': 'TAM_Milh√µes',
        'Complexidade_Tecnica': 'Complexidade_T√©cnica',
        'Competicao_Level': 'Competi√ß√£o_Level'
    }, inplace=True)
    df_languages['ROI_Ratio'] = df_languages['LTV_USD'] / df_languages['CAC_USD']
    df_languages['ROI_Ano2_K'] = df_languages['Ano2_Revenue_K'] - df_languages['Investimento_K']
    df_languages['Revenue_Growth'] = (df_languages['Ano2_Revenue_K'] / df_languages['Ano1_Revenue_K'] - 1) * 100

    # Dados de fases de rollout
    df_phases = pd.read_csv(data_dir / "phases.csv")
    df_phases.rename(columns={
        'Usuarios_Projetados': 'Usu√°rios_Projetados'
    }, inplace=True)
    df_phases['Idiomas'] = df_phases['Idiomas'].apply(ast.literal_eval)

    # An√°lise competitiva
    df_competitors = pd.read_csv(data_dir / "competitors.csv")
    df_competitors.rename(columns={'Modelo_Negocio': 'Modelo_Neg√≥cio'}, inplace=True)

    # Proje√ß√£o de receita temporal
    df_projection = pd.read_csv(data_dir / "projection.csv")
    df_projection.rename(columns={
        'Periodo': 'Per√≠odo',
        'Confianca_Pct': 'Confian√ßa_Pct'
    }, inplace=True)

    return df_languages, df_phases, df_competitors, df_projection

# ========================================================================================
# FUN√á√ïES DE VISUALIZA√á√ÉO AVAN√áADAS
# ========================================================================================

def create_interactive_tam_chart(df, selected_languages=None):
    """Gr√°fico TAM interativo com filtros"""
    df_filtered = df.head(8) if selected_languages is None else df[df['Idioma'].isin(selected_languages)]
    df_sorted = df_filtered.sort_values('TAM_Milh√µes', ascending=True)
    
    fig = go.Figure()
    
    colors = [COLORS['highlight'] if x in df_sorted['Idioma'].head(3).values 
              else COLORS['primary'] for x in df_sorted['Idioma']]
    
    fig.add_trace(go.Bar(
        y=df_sorted['Idioma'],
        x=df_sorted['TAM_Milh√µes'],
        orientation='h',
        marker_color=colors,
        text=[f"{x}M pessoas" for x in df_sorted['TAM_Milh√µes']],
        textposition='auto',
        hovertemplate='<b>%{y}</b><br>Demanda: %{x}M pessoas<br>Rank Global: #%{customdata}<extra></extra>',
        customdata=df_sorted['Rank_Global']
    ))
    
    fig.update_layout(
        title='üéØ TAM por Idioma: Demanda Global de Aprendizado',
        xaxis_title='Milh√µes de Pessoas que Querem Aprender',
        yaxis_title='',
        height=400,
        template='plotly_white',
        font=dict(size=12),
        plot_bgcolor='rgba(0,0,0,0)'
    )
    
    return fig

def create_advanced_roi_matrix(df):
    """Matriz ROI vs Complexidade com bubbles"""
    fig = go.Figure()
    
    # Normalizar tamanho dos bubbles
    sizes = (df['TAM_Milh√µes'] / df['TAM_Milh√µes'].max() * 50 + 10)
    
    fig.add_trace(go.Scatter(
        x=df['Complexidade_T√©cnica'],
        y=df['ROI_Ratio'],
        mode='markers+text',
        marker=dict(
            size=sizes,
            color=df['Payback_Meses'],
            colorscale='RdYlBu_r',
            colorbar=dict(title="Payback (meses)"),
            line=dict(width=2, color='white')
        ),
        text=df['Idioma'],
        textposition='middle center',
        textfont=dict(size=10, color='white'),
        hovertemplate='<b>%{text}</b><br>Complexidade: %{x}/10<br>ROI: %{y:.1f}x<br>TAM: %{customdata}M<br>Payback: %{marker.color} meses<extra></extra>',
        customdata=df['TAM_Milh√µes']
    ))
    
    # Linhas de refer√™ncia
    fig.add_hline(y=3, line_dash="dash", line_color=COLORS['benchmark'], 
                  annotation_text="ROI M√≠nimo Saud√°vel (3x)")
    fig.add_vline(x=5, line_dash="dash", line_color=COLORS['highlight'], 
                  annotation_text="Complexidade M√©dia")
    
    fig.update_layout(
        title='üîÑ Matriz Estrat√©gica: ROI vs Complexidade vs TAM',
        xaxis_title='Complexidade T√©cnica (1-10)',
        yaxis_title='ROI (LTV/CAC)',
        height=500,
        template='plotly_white'
    )
    
    return fig

def create_revenue_projection_with_scenarios(df_proj, scenario_factor=1.0):
    """Proje√ß√£o de receita com cen√°rios otimista/pessimista"""
    fig = go.Figure()
    
    # Cen√°rio base
    fig.add_trace(go.Scatter(
        x=df_proj['Per√≠odo'],
        y=df_proj['Receita_Base_K'] * scenario_factor,
        mode='lines+markers',
        name='Cen√°rio Base',
        line=dict(color=COLORS['primary'], width=3),
        marker=dict(size=10)
    ))
    
    # Banda de confian√ßa
    fig.add_trace(go.Scatter(
        x=df_proj['Per√≠odo'],
        y=df_proj['Receita_Max_K'] * scenario_factor,
        fill=None,
        mode='lines',
        line_color='rgba(0,0,0,0)',
        showlegend=False
    ))
    
    fig.add_trace(go.Scatter(
        x=df_proj['Per√≠odo'],
        y=df_proj['Receita_Min_K'] * scenario_factor,
        fill='tonexty',
        mode='lines',
        line_color='rgba(0,0,0,0)',
        name='Intervalo de Confian√ßa',
        fillcolor='rgba(74,144,226,0.2)'
    ))
    
    # Marcos importantes
    fig.add_annotation(
        x='Ano 1',
        y=df_proj[df_proj['Per√≠odo'] == 'Ano 1']['Receita_Base_K'].iloc[0] * scenario_factor,
        text="Breakeven Global",
        arrowhead=2,
        arrowcolor=COLORS['benchmark']
    )
    
    fig.update_layout(
        title=f'üìà Proje√ß√£o de Receita (Cen√°rio: {scenario_factor:.1f}x)',
        xaxis_title='Per√≠odo',
        yaxis_title='Receita (K USD)',
        height=400,
        template='plotly_white'
    )
    
    return fig

def create_competitive_landscape(df_comp):
    """An√°lise competitiva em bubble chart"""
    fig = go.Figure()
    
    colors_map = {
        'Duolingo': COLORS['highlight'],
        'Babbel': COLORS['benchmark'], 
        'Busuu': COLORS['neutral'],
        'LingoApp (Projetado)': COLORS['primary']
    }
    
    for platform in df_comp['Plataforma']:
        data = df_comp[df_comp['Plataforma'] == platform].iloc[0]
        
        fig.add_trace(go.Scatter(
            x=[data['User_Base_Milh√µes']],
            y=[data['Revenue_Milh√µes']],
            mode='markers+text',
            marker=dict(
                size=data['Market_Share_Pct'] * 2,
                color=colors_map[platform],
                line=dict(width=2, color='white')
            ),
            text=platform,
            textposition='middle center' if platform != 'Duolingo' else 'top center',
            textfont=dict(size=10, color='white' if platform != 'Duolingo' else 'black'),
            name=platform,
            hovertemplate=f'<b>{platform}</b><br>Usu√°rios: %{{x}}M<br>Receita: $%{{y}}M<br>Market Share: {data["Market_Share_Pct"]}%<br>Idiomas: {data["Idiomas_Count"]}<extra></extra>'
        ))
    
    fig.update_layout(
        title='üèÜ Posicionamento Competitivo: Usu√°rios vs Receita',
        xaxis_title='Base de Usu√°rios (Milh√µes)',
        yaxis_title='Receita Anual (Milh√µes USD)',
        height=450,
        template='plotly_white',
        showlegend=False
    )
    
    return fig

def create_sensitivity_analysis():
    """An√°lise de sensibilidade interativa"""
    # Par√¢metros base
    base_tam = 100  # Milh√µes
    base_conversion = 0.05  # 5%
    base_arppu = 25  # USD
    
    # Varia√ß√µes
    tam_variations = np.linspace(0.5, 2.0, 11)  # 50% a 200% do base
    conversion_variations = np.linspace(0.5, 2.0, 11)
    
    revenues = []
    for tam_mult in tam_variations:
        row = []
        for conv_mult in conversion_variations:
            revenue = (base_tam * tam_mult) * (base_conversion * conv_mult) * base_arppu
            row.append(revenue / 1000)  # Converter para milh√µes
        revenues.append(row)
    
    fig = go.Figure(data=go.Heatmap(
        z=revenues,
        x=[f"{x:.1f}x" for x in conversion_variations],
        y=[f"{x:.1f}x" for x in tam_variations],
        colorscale='RdYlBu_r',
        hovertemplate='TAM: %{y}<br>Convers√£o: %{x}<br>Receita: $%{z:.1f}M<extra></extra>'
    ))
    
    fig.update_layout(
        title='üéØ An√°lise de Sensibilidade: TAM vs Taxa de Convers√£o',
        xaxis_title='Multiplicador da Taxa de Convers√£o',
        yaxis_title='Multiplicador do TAM',
        height=400
    )
    
    return fig

# ========================================================================================
# INTERFACE PRINCIPAL DO STREAMLIT
# ========================================================================================

def main():
    # Header principal
    st.markdown("""
    <div class="main-header">
        <h1>üåç LingoApp: Estrat√©gia de Expans√£o Multil√≠ngue</h1>
        <h3>An√°lise Estrat√©gica Avan√ßada com IA e Simula√ß√µes Interativas</h3>
        <p>Dashboard Superior com An√°lise de Sensibilidade em Tempo Real</p>
    </div>
    """, unsafe_allow_html=True)
    
    # Carregamento de dados
    df_languages, df_phases, df_competitors, df_projection = load_data()
    
    # ========================================================================================
    # SIDEBAR COM CONTROLES INTERATIVOS
    # ========================================================================================
    
    st.sidebar.header("üéõÔ∏è Controles Interativos")
    
    # Filtros de idiomas
    selected_languages = st.sidebar.multiselect(
        "Selecionar Idiomas para An√°lise:",
        options=df_languages['Idioma'].tolist(),
        default=df_languages['Idioma'].head(6).tolist(),
        help="Escolha quais idiomas analisar em detalhes"
    )
    
    # Cen√°rios de simula√ß√£o
    st.sidebar.subheader("üìä Cen√°rios de Simula√ß√£o")
    scenario_factor = st.sidebar.slider(
        "Multiplicador de Cen√°rio:",
        min_value=0.5,
        max_value=2.0,
        value=1.0,
        step=0.1,
        help="1.0 = Base, <1.0 = Pessimista, >1.0 = Otimista"
    )
    
    # Par√¢metros de an√°lise
    st.sidebar.subheader("‚öôÔ∏è Par√¢metros de An√°lise")
    min_roi = st.sidebar.number_input("ROI M√≠nimo Aceit√°vel:", value=2.0, step=0.1)
    max_payback = st.sidebar.number_input("Payback M√°ximo (meses):", value=18, step=1)
    min_tam = st.sidebar.number_input("TAM M√≠nimo (milh√µes):", value=10.0, step=5.0)
    
    # Filtros aplicados
    df_filtered = df_languages[
        (df_languages['ROI_Ratio'] >= min_roi) &
        (df_languages['Payback_Meses'] <= max_payback) &
        (df_languages['TAM_Milh√µes'] >= min_tam)
    ]
    
    # ========================================================================================
    # M√âTRICAS PRINCIPAIS EM TEMPO REAL
    # ========================================================================================
    
    st.header("üìä M√©tricas Principais em Tempo Real")
    
    col1, col2, col3, col4, col5 = st.columns(5)
    
    with col1:
        total_tam = df_filtered['TAM_Milh√µes'].sum()
        st.metric("TAM Total", f"{total_tam:.0f}M", f"+{len(df_filtered)} idiomas")
    
    with col2:
        avg_roi = df_filtered['ROI_Ratio'].mean()
        st.metric("ROI M√©dio", f"{avg_roi:.1f}x", f"vs {min_roi:.1f}x m√≠n")
    
    with col3:
        total_revenue_y2 = df_filtered['Ano2_Revenue_K'].sum() * scenario_factor
        st.metric("Receita Ano 2", f"${total_revenue_y2:.0f}K", f"Cen√°rio {scenario_factor:.1f}x")
    
    with col4:
        avg_payback = df_filtered['Payback_Meses'].mean()
        st.metric("Payback M√©dio", f"{avg_payback:.0f} meses", f"vs {max_payback} m√°x")
    
    with col5:
        total_investment = df_filtered['Investimento_K'].sum()
        total_return_y2 = df_filtered['ROI_Ano2_K'].sum() * scenario_factor
        net_profit = total_return_y2 - total_investment
        st.metric("Lucro L√≠quido", f"${net_profit:.0f}K", f"ROI: {total_return_y2/total_investment:.1f}x")
    
    # ========================================================================================
    # VISUALIZA√á√ïES AVAN√áADAS
    # ========================================================================================
    
    st.header("üìà An√°lise Visual Avan√ßada")
    
    # Abas para diferentes an√°lises - NOMES MAIS EVIDENTES
    tab1, tab2, tab3, tab4, tab5 = st.tabs([
        "üéØ MERCADO & OPORTUNIDADES", 
        "üí∞ AN√ÅLISE FINANCEIRA", 
        "üîÑ MATRIZ ESTRAT√âGICA",
        "üèÜ COMPETI√á√ÉO & MARKET SHARE", 
        "üîÆ SIMULA√á√ïES AVAN√áADAS"
    ])
    
    with tab1:
        # Cabe√ßalho da aba
        st.markdown("""
        <div class="tab-header">
            üéØ MERCADO & OPORTUNIDADES
        </div>
        """, unsafe_allow_html=True)
        
        col1, col2 = st.columns(2)
        
        with col1:
            fig_tam = create_interactive_tam_chart(df_languages, selected_languages)
            st.plotly_chart(fig_tam, use_container_width=True)
            
            # Insight box
            top_3_tam = df_filtered.nlargest(3, 'TAM_Milh√µes')['Idioma'].tolist()
            st.markdown(f"""
            <div class="insight-box">
                <h4>üí° Insight: Lideran√ßa em Demanda</h4>
                <p>Os top 3 idiomas por demanda s√£o: <strong>{', '.join(top_3_tam)}</strong></p>
                <p>Representam <strong>{df_filtered.nlargest(3, 'TAM_Milh√µes')['TAM_Milh√µes'].sum():.0f}M pessoas</strong> interessadas em aprender.</p>
            </div>
            """, unsafe_allow_html=True)
        
        with col2:
            # Gr√°fico de correla√ß√£o TAM vs Revenue
            fig_correlation = go.Figure()
            fig_correlation.add_trace(go.Scatter(
                x=df_filtered['TAM_Milh√µes'],
                y=df_filtered['Ano2_Revenue_K'],
                mode='markers+text',
                text=df_filtered['Idioma'],
                textposition='top center',
                marker=dict(
                    size=12,
                    color=df_filtered['ROI_Ratio'],
                    colorscale='Viridis',
                    colorbar=dict(title="ROI")
                ),
                hovertemplate='<b>%{text}</b><br>TAM: %{x}M<br>Receita Y2: $%{y}K<extra></extra>'
            ))
            
            fig_correlation.update_layout(
                title='üîó Correla√ß√£o: TAM vs Receita Ano 2',
                xaxis_title='TAM (Milh√µes de Pessoas)',
                yaxis_title='Receita Ano 2 (K USD)',
                height=400,
                template='plotly_white'
            )
            
            st.plotly_chart(fig_correlation, use_container_width=True)
    
    with tab2:
        # Cabe√ßalho da aba
        st.markdown("""
        <div class="tab-header">
            üí∞ AN√ÅLISE FINANCEIRA
        </div>
        """, unsafe_allow_html=True)
        
        col1, col2 = st.columns(2)
        
        with col1:
            # Gr√°fico de receita por fase
            fig_phases = go.Figure()
            fig_phases.add_trace(go.Bar(
                x=df_phases['Fase'],
                y=df_phases['Investimento_K'],
                name='Investimento',
                marker_color=COLORS['highlight']
            ))
            fig_phases.add_trace(go.Bar(
                x=df_phases['Fase'],
                y=df_phases['Receita_Esperada_K'],
                name='Receita Esperada',
                marker_color=COLORS['primary']
            ))
            
            fig_phases.update_layout(
                title='üí∞ Investimento vs Receita por Fase',
                xaxis_title='Fases de Rollout',
                yaxis_title='Valor (K USD)',
                barmode='group',
                height=400,
                template='plotly_white'
            )
            
            st.plotly_chart(fig_phases, use_container_width=True)
        
        with col2:
            # Proje√ß√£o de receita com cen√°rios
            fig_proj = create_revenue_projection_with_scenarios(df_projection, scenario_factor)
            st.plotly_chart(fig_proj, use_container_width=True)
        
        # An√°lise detalhada de ROI
        st.subheader("üìä An√°lise Detalhada de ROI por Idioma")
        df_roi_analysis = df_filtered[['Idioma', 'Investimento_K', 'Ano1_Revenue_K', 'Ano2_Revenue_K', 'ROI_Ratio', 'Payback_Meses']].copy()
        df_roi_analysis['ROI_Ano1_%'] = ((df_roi_analysis['Ano1_Revenue_K'] / df_roi_analysis['Investimento_K']) - 1) * 100
        df_roi_analysis['ROI_Ano2_%'] = ((df_roi_analysis['Ano2_Revenue_K'] / df_roi_analysis['Investimento_K']) - 1) * 100
        
        st.dataframe(
            df_roi_analysis.style.format({
                'Investimento_K': '${:,.0f}K',
                'Ano1_Revenue_K': '${:,.0f}K',
                'Ano2_Revenue_K': '${:,.0f}K',
                'ROI_Ratio': '{:.1f}x',
                'Payback_Meses': '{:.0f} meses',
                'ROI_Ano1_%': '{:.0f}%',
                'ROI_Ano2_%': '{:.0f}%'
            }).background_gradient(subset=['ROI_Ano2_%'], cmap='RdYlGn'),
            use_container_width=True
        )
    
    with tab3:
        # Cabe√ßalho da aba
        st.markdown("""
        <div class="tab-header">
            üîÑ MATRIZ ESTRAT√âGICA: ROI vs COMPLEXIDADE
        </div>
        """, unsafe_allow_html=True)
        
        # Matriz estrat√©gica avan√ßada
        fig_matrix = create_advanced_roi_matrix(df_filtered)
        st.plotly_chart(fig_matrix, use_container_width=True)
        
        col1, col2 = st.columns(2)
        
        with col1:
            # Quadrantes estrat√©gicos
            df_quadrants = df_filtered.copy()
            
            # Verificar se h√° dados suficientes para an√°lise
            if len(df_quadrants) == 0:
                st.warning("‚ö†Ô∏è Nenhum idioma atende aos crit√©rios selecionados.")
            else:
                # Definir quadrantes
                median_complexity = df_quadrants['Complexidade_T√©cnica'].median()
                median_roi = df_quadrants['ROI_Ratio'].median()
                
                conditions = [
                    (df_quadrants['Complexidade_T√©cnica'] <= median_complexity) & (df_quadrants['ROI_Ratio'] >= median_roi),
                    (df_quadrants['Complexidade_T√©cnica'] > median_complexity) & (df_quadrants['ROI_Ratio'] >= median_roi),
                    (df_quadrants['Complexidade_T√©cnica'] <= median_complexity) & (df_quadrants['ROI_Ratio'] < median_roi),
                    (df_quadrants['Complexidade_T√©cnica'] > median_complexity) & (df_quadrants['ROI_Ratio'] < median_roi)
                ]
                
                choices = ['üü¢ Wins F√°ceis', 'üü° Desafios Valiosos', 'üü† Oportunidades R√°pidas', 'üî¥ Evitar']
                df_quadrants['Quadrante'] = np.select(conditions, choices, default='Indefinido')
                
                quadrant_summary = df_quadrants.groupby('Quadrante').agg({
                    'Idioma': 'count',
                    'TAM_Milh√µes': 'sum',
                    'Ano2_Revenue_K': 'sum'
                }).rename(columns={'Idioma': 'Quantidade'})
                
                st.write("üìä **Resumo por Quadrante Estrat√©gico:**")
                st.dataframe(quadrant_summary, use_container_width=True)
        
        with col2:
            # Recomenda√ß√µes estrat√©gicas
            st.markdown("""
            <div class="insight-box">
                <h4>üéØ Recomenda√ß√µes Estrat√©gicas</h4>
                <ul>
                    <li><strong>üü¢ Priorizar:</strong> Idiomas com alto ROI e baixa complexidade</li>
                    <li><strong>üü° Avaliar:</strong> Alto ROI mas complexos - considerar parcerias</li>
                    <li><strong>üü† Quick Wins:</strong> Baixa complexidade - testes r√°pidos</li>
                    <li><strong>üî¥ Postergar:</strong> Baixo ROI e alta complexidade</li>
                </ul>
            </div>
            """, unsafe_allow_html=True)
    
    with tab4:
        # Cabe√ßalho da aba
        st.markdown("""
        <div class="tab-header">
            üèÜ AN√ÅLISE COMPETITIVA & POSICIONAMENTO DE MERCADO
        </div>
        """, unsafe_allow_html=True)
        
        # An√°lise competitiva
        fig_comp = create_competitive_landscape(df_competitors)
        st.plotly_chart(fig_comp, use_container_width=True)
        
        # An√°lise de market share
        col1, col2 = st.columns(2)
        
        with col1:
            fig_market_share = go.Figure(data=[go.Pie(
                labels=df_competitors['Plataforma'],
                values=df_competitors['Market_Share_Pct'],
                hole=0.4,
                marker_colors=[COLORS['highlight'], COLORS['benchmark'], COLORS['neutral'], COLORS['primary']]
            )])
            
            fig_market_share.update_layout(
                title='ü•ß Market Share Atual',
                height=400
            )
            
            st.plotly_chart(fig_market_share, use_container_width=True)
        
        with col2:
            # Efici√™ncia de receita
            df_competitors['Revenue_per_User'] = df_competitors['Revenue_Milh√µes'] / df_competitors['User_Base_Milh√µes']
            
            fig_efficiency = go.Figure()
            fig_efficiency.add_trace(go.Bar(
                x=df_competitors['Plataforma'],
                y=df_competitors['Revenue_per_User'],
                marker_color=[COLORS['highlight'], COLORS['benchmark'], COLORS['neutral'], COLORS['primary']]
            ))
            
            fig_efficiency.update_layout(
                title='üíé Receita por Usu√°rio (Efici√™ncia)',
                xaxis_title='Plataforma',
                yaxis_title='Revenue/User (USD)',
                height=400,
                template='plotly_white'
            )
            
            st.plotly_chart(fig_efficiency, use_container_width=True)
    
    with tab5:
        # Cabe√ßalho da aba
        st.markdown("""
        <div class="tab-header">
            üîÆ SIMULA√á√ïES AVAN√áADAS: MONTE CARLO & OTIMIZA√á√ÉO
        </div>
        """, unsafe_allow_html=True)
        
        # An√°lise de sensibilidade
        col1, col2 = st.columns(2)
        
        with col1:
            fig_sensitivity = create_sensitivity_analysis()
            st.plotly_chart(fig_sensitivity, use_container_width=True)
        
        with col2:
            # Simulador de Monte Carlo
            st.subheader("üé∞ Simula√ß√£o Monte Carlo")
            
            n_simulations = st.slider("N√∫mero de Simula√ß√µes:", 100, 10000, 1000)
            
            if st.button("üöÄ Executar Simula√ß√£o"):
                with st.spinner("Executando simula√ß√µes..."):
                    # Simula√ß√£o Monte Carlo para receita total
                    np.random.seed(42)
                    
                    simulations = []
                    for _ in range(n_simulations):
                        total_revenue = 0
                        for _, lang in df_filtered.iterrows():
                            # Varia√ß√£o aleat√≥ria nos par√¢metros
                            tam_variation = np.random.normal(1.0, 0.2)  # ¬±20%
                            conversion_variation = np.random.normal(1.0, 0.3)  # ¬±30%
                            arppu_variation = np.random.normal(1.0, 0.15)  # ¬±15%
                            
                            simulated_revenue = (lang['Ano2_Revenue_K'] * 
                                               tam_variation * 
                                               conversion_variation * 
                                               arppu_variation)
                            total_revenue += simulated_revenue
                        
                        simulations.append(total_revenue)
                    
                    # Resultados da simula√ß√£o
                    simulations = np.array(simulations)
                    
                    fig_monte_carlo = go.Figure()
                    fig_monte_carlo.add_trace(go.Histogram(
                        x=simulations,
                        nbinsx=50,
                        marker_color=COLORS['primary'],
                        opacity=0.7
                    ))
                    
                    # Percentis
                    p5 = np.percentile(simulations, 5)
                    p50 = np.percentile(simulations, 50)
                    p95 = np.percentile(simulations, 95)
                    
                    fig_monte_carlo.add_vline(x=p5, line_dash="dash", line_color=COLORS['highlight'], 
                                            annotation_text=f"P5: ${p5:.0f}K")
                    fig_monte_carlo.add_vline(x=p50, line_dash="solid", line_color=COLORS['benchmark'], 
                                            annotation_text=f"Mediana: ${p50:.0f}K")
                    fig_monte_carlo.add_vline(x=p95, line_dash="dash", line_color=COLORS['primary'], 
                                            annotation_text=f"P95: ${p95:.0f}K")
                    
                    fig_monte_carlo.update_layout(
                        title='üìä Distribui√ß√£o de Receita - Monte Carlo',
                        xaxis_title='Receita Total Ano 2 (K USD)',
                        yaxis_title='Frequ√™ncia',
                        height=400,
                        template='plotly_white'
                    )
                    
                    st.plotly_chart(fig_monte_carlo, use_container_width=True)
                    
                    # M√©tricas da simula√ß√£o
                    col_sim1, col_sim2, col_sim3 = st.columns(3)
                    with col_sim1:
                        st.metric("Receita Mediana", f"${p50:.0f}K")
                    with col_sim2:
                        st.metric("Cen√°rio Pessimista (P5)", f"${p5:.0f}K")
                    with col_sim3:
                        st.metric("Cen√°rio Otimista (P95)", f"${p95:.0f}K")
        
        # Otimiza√ß√£o de portf√≥lio
        st.subheader("üéØ Otimiza√ß√£o de Portf√≥lio")
        st.write("**Encontre a combina√ß√£o √≥tima de idiomas dado um or√ßamento limitado**")
        
        budget_limit = st.number_input("Or√ßamento Total (K USD):", value=500, step=50)
        
        if st.button("üîç Otimizar Portf√≥lio"):
            # Algoritmo greedy simples para otimiza√ß√£o
            df_sorted_efficiency = df_filtered.copy()
            df_sorted_efficiency['Efficiency'] = df_sorted_efficiency['Ano2_Revenue_K'] / df_sorted_efficiency['Investimento_K']
            df_sorted_efficiency = df_sorted_efficiency.sort_values('Efficiency', ascending=False)
            
            selected_portfolio = []
            total_investment = 0
            total_revenue = 0
            
            for _, lang in df_sorted_efficiency.iterrows():
                if total_investment + lang['Investimento_K'] <= budget_limit:
                    selected_portfolio.append(lang['Idioma'])
                    total_investment += lang['Investimento_K']
                    total_revenue += lang['Ano2_Revenue_K']
            
            st.success(f"**Portf√≥lio Otimizado:**")
            st.write(f"**Idiomas selecionados:** {', '.join(selected_portfolio)}")
            st.write(f"**Investimento total:** ${total_investment:.0f}K (de ${budget_limit}K)")
            st.write(f"**Receita esperada Ano 2:** ${total_revenue:.0f}K")
            st.write(f"**ROI do portf√≥lio:** {total_revenue/total_investment:.1f}x")
    
    # ========================================================================================
    # SE√á√ÉO DE INSIGHTS E RECOMENDA√á√ïES
    # ========================================================================================
    
    st.header("üß† Insights e Recomenda√ß√µes")
    
    col1, col2 = st.columns(2)
    
    with col1:
        st.markdown("""
        <div class="insight-box">
            <h4>üéØ Insights Principais</h4>
            <ul>
                <li><strong>TAM vs Realidade:</strong> Espanhol lidera demanda (120M) mas alta competi√ß√£o</li>
                <li><strong>Sweet Spot:</strong> Franc√™s e Alem√£o oferecem melhor ROI/complexidade</li>
                <li><strong>Nicho Strategy:</strong> √Årabe e Turco = baixa competi√ß√£o, mercados especializados</li>
                <li><strong>Tech Challenge:</strong> Mandarim/Japon√™s = alto potencial mas complexidade t√©cnica</li>
            </ul>
        </div>
        """, unsafe_allow_html=True)
    
    with col2:
        st.markdown("""
        <div class="insight-box">
            <h4>üìã Recomenda√ß√µes Estrat√©gicas</h4>
            <ol>
                <li><strong>Fase 1:</strong> Foco em idiomas latinos (ES, FR, DE) - quick wins</li>
                <li><strong>Fase 2:</strong> Expandir para PT, IT - mercados emergentes</li>
                <li><strong>Fase 3:</strong> Investir em JA, ZH - prepara√ß√£o t√©cnica</li>
                <li><strong>Diferencia√ß√£o:</strong> Explorar AR, TR, ID como vantagem competitiva</li>
            </ol>
        </div>
        """, unsafe_allow_html=True)
    
    # ========================================================================================
    # FOOTER COM METODOLOGIA
    # ========================================================================================
    
    st.markdown("---")
    st.markdown("""
    <div style="text-align: center; color: #6c757d; font-size: 0.9em;">
        <p><strong>Metodologia:</strong> An√°lise multicrit√©rio TAM√óLTV√óViabilidade | 
        <strong>Fontes:</strong> Relat√≥rio Estrat√©gico LingoApp 2024 | 
        <strong>Atualiza√ß√£o:</strong> Tempo real</p>
        <p><strong>Cores:</strong> Paleta otimizada para daltonismo (#4A90E2, #FF6B6B, #FFB000) | 
        <strong>Framework:</strong> Tufte + Wickham + Pica</p>
    </div>
    """, unsafe_allow_html=True)

if __name__ == "__main__":
    main() 